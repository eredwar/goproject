// Project Recipizer: Error Log
.\project.go:73:120: syntax error: unexpected newline in composite literal; possibly missing comma or }
.\project.go:47:25: invalid operation: make([]Recipe) expects 2 or 3 arguments; found 1
.\project.go:78:37: invalid operation: make([]Recipe) expects 2 or 3 arguments; found 1
.\project.go:195:12: use of untyped nil in assignment
.\project.go:196:10: use of untyped nil in assignment
.\project.go:198:16: use of untyped nil in assignment
.\project.go:200:30: cannot use nil as bufio.Scanner value in variable declaration
.\project.go:212:14: cannot use bufio.NewScanner(f) (value of type *bufio.Scanner) as type bufio.Scanner in assignment
.\project.go:214:23: scanner.Text().contains undefined (type string has no field or method contains)
.\project.go:215:20: scanner.Text().contains undefined (type string has no field or method contains)
.\project.go:225:13: cannot use bufio.NewScanner(f) (value of type *bufio.Scanner) as type bufio.Scanner in assignment
.\project.go:225:13: too many errors

// Test Wave 2: 12/2/2022 - 10:30 AM (EST)
.\project.go:47:25: syntax error: unexpected {, expecting expression
.\project.go:48:20: syntax error: unexpected ] after top level declaration
.\project.go:89:120: syntax error: unexpected newline in composite literal; possibly missing comma or }

// Test Wave 3: 12/2/2022 - 11:09 AM (EST)
.\project.go:55:10: syntax error: unexpected : after top level declaration
.\project.go:89:121: syntax error: unexpected newline in composite literal; possibly missing comma or }

// Test Wave 4: 12/2/2022 - 11:30 AM (EST)
# command-line-arguments
.\project.go:62:108: syntax error: unexpected newline in composite literal; possibly missing comma or }
.\project.go:89:121: syntax error: unexpected newline in composite literal; possibly missing comma or }

// Tests Wave 5: 12/2/2022 - 12:10 PM (EST) (Also we should add concurrency somewhere in the program to make it look good for the professor.)
# command-line-arguments
.\project.go:89:121: syntax error: unexpected newline in composite literal; possibly missing comma or }

# command-line-arguments
.\project.go:50:74: cannot use 1 (untyped int constant) as string value in struct literal
.\project.go:66:15: undefined: recipe
.\project.go:94:37: invalid operation: make([]Recipe) expects 2 or 3 arguments; found 1

.\project.go:211:12: use of untyped nil in assignment
.\project.go:212:10: use of untyped nil in assignment
.\project.go:214:16: use of untyped nil in assignment
.\project.go:216:30: cannot use nil as bufio.Scanner value in variable declaration
.\project.go:228:14: cannot use bufio.NewScanner(f) (value of type *bufio.Scanner) as type bufio.Scanner in assignment
.\project.go:230:23: scanner.Text().contains undefined (type string has no field or method contains)
.\project.go:231:20: scanner.Text().contains undefined (type string has no field or method contains)
.\project.go:231:20: too many errors

# command-line-arguments
.\project.go:211:26: cannot convert nil to type SessionID
.\project.go:213:46: cannot convert nil to type bufio.Scanner
.\project.go:227:23: scanner.Text().contains undefined (type string has no field or method contains)
.\project.go:228:20: scanner.Text().contains undefined (type string has no field or method contains)
.\project.go:240:22: scanner.Text().contains undefined (type string has no field or method contains)
.\project.go:241:19: scanner.Text().contains undefined (type string has no field or method contains)
.\project.go:247:6: f.close undefined (type *os.File has no field or method close, but does have Close)
.\project.go:273:8: file.close undefined (type *os.File has no field or method close, but does have Close)
.\project.go:276:2: undefined: f
.\project.go:419:2: undefined: htmlForm

// Test Wave Final: 12/3/2022 - 7:07 AM (EST)
CreateFile project.go: The system cannot find the file specified.

// Test Wave Final Part 2 (Update): 12/3/2022 - 7:27 PM (EST)
func loginHandler(w http.ResponseWriter, r *http.Request) {
	rand.Seed(time.Now().UnixNano())
	sessionID := fmt.Sprint(rand.Intn(90000))

	page := template.New("login")
	page1 := page.Funcs(template.FuncMap{"loggingIn": func() string { return "Cool Cakes!" }})

	report, err := page1.Parse(loginTemplate)
	checkError(err)

	err = report.Execute(w, page1)
	checkError(err)
	cookie := http.Cookie{
		Name:     "GoRecipeBlog_sessionid",
		Value:    sessionID,
		Path:     "/",
		MaxAge:   3600,
		HttpOnly: true,
		Secure:   true,
		SameSite: http.SameSiteLaxMode,
	}
	http.Redirect(w, r, "https://localhost:8000/eatcookie?cookie="+cookie.Value, http.StatusSeeOther)
} // Please let me know what you think. The sign up is less complicated, but I sill have to add to the loginHandler to check for pre-existing accounts that have been added to the system.
